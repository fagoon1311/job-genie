// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique // clerk user id
  email         String    @unique
  name          String?
  imageUrl      String?
  industry      String?    // Combined industry-subindustry (e.g., "tech-software-development")
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile fields
  bio           String?
  experience    Int?      // Years of experience
  
  // Relations
  skills        String[]  // Array of skills
  resume        Resume?
  coverLetter   CoverLetter[]
  jobMatches JobMatch[] // One-to-many relation to JobMatch
}


model Resume {
  id          String    @id @default(cuid())
  userId      String    @unique    // One resume per user
  user        User      @relation(fields: [userId], references: [id])
  content     String    @db.Text // Markdown content
  atsScore    Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CoverLetter {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String    // Markdown content
  jobDescription  String?
  companyName     String    // Name of the company applying to
  jobTitle        String    // Position applying for
  status          String    @default("draft") // draft, completed
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}

// Combined Industry Trends and Salary Insights
model IndustryInsight {
  id            String    @id @default(cuid())
  industry      String    @unique  // The industry this data belongs to (e.g., "tech-software-development")
  
  // Users in this industry
  users         User[]
  
  // Salary data
  salaryRanges  Json[]    // Array of { role: string, min: float, max: float, median: float, location: string? }
  
  // Industry trends
  growthRate    Float     // Industry growth rate
  demandLevel   String    // "High", "Medium", "Low"
  topSkills     String[]  // Most in-demand skills
  
  // Market conditions
  marketOutlook String    // "Positive", "Neutral", "Negative"
  keyTrends     String[]  // Array of current industry trends
  
  // Learning suggestions
  recommendedSkills String[]  // Skills recommended for the industry
  
  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime  // Scheduled update time

  @@index([industry])
}

model Job {
  id              String    @id @default(cuid())
  title           String
  company         String
  location        String
  platform        String    // e.g., "Naukri", "Monster", "RemoteOK"
  link            String    @unique
  description     String    @db.Text
  industry        String?
  jobRole         String?
  requiredSkills  String[]  // List of required skills
  experienceLevel String?   // e.g., "Fresher", "2-4 years", etc.
  postedAt        DateTime?
  fetchedAt       DateTime  @default(now())
  remote          Boolean   @default(false)
  salaryRange     String?   // e.g., "5-8 LPA" or use structured JSON later
  tags            String[]  // Tech, Startup, AI, etc.

  // Optional match to user if needed
  userMatches     JobMatch[]

  @@index([industry, jobRole])
}

model JobMatch {
  id       String   @id @default(cuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  jobId    String
  job      Job      @relation(fields: [jobId], references: [id])
  matchScore Float  // AI-generated score (e.g., based on resume-skill-job match)

  applied   Boolean @default(false)
  bookmarked Boolean @default(false)
  createdAt DateTime @default(now())

  @@unique([userId, jobId])
}
